{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;
\red153\green168\blue186;\red109\green109\blue109;\red86\green132\blue173;\red133\green96\blue154;\red88\green118\blue71;
}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c34510\c46275\c27843;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww14400\viewh10800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \
\
\'c0\'a7\'c0\'e5\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs26 \cf2 \cb3 public int \cf4 Solution\cf5 (String[][] clothes) \{\
\
    \cf6 // 1. 
\f0 \'bf\'ca\'c0\'bb
\f2  
\f0 \'c1\'be\'b7\'f9\'ba\'b0\'b7\'ce
\f2  
\f0 \'b1\'b8\'ba\'d0\'c7\'cf\'b1\'e2
\f2 \
    
\f1 \cf5 HashMap<String\cf2 , \cf5 Integer> map = \cf2 new \cf5 HashMap<>()\cf2 ;\
\
    for \cf5 (String[] clothe : clothes) \{\
        String type = clothe[\cf7 1\cf5 ]\cf2 ;\
        \cf5 map.put(type\cf2 , \cf5 map.getOrDefault(type\cf2 , \cf7 0\cf5 ) + \cf7 1\cf5 )\cf2 ;\
    \cf5 \}\
\
    System.
\f3\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "map.keySet() = " \cf5 + map.keySet())\cf2 ;\cf6 //key 
\f0 \'b5\'e9
\f2  
\f0 \'c1\'fd\'c7\'d5
\f2 \
    
\f1 \cf5 System.
\f3\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "map.values() = " \cf5 + map.values())\cf2 ;\cf6 //value 
\f0 \'b5\'e9
\f2  
\f0 \'c1\'fd\'c7\'d5
\f2 \
\
    
\f1 // 2. 
\f0 \'c0\'d4\'c1\'f6
\f2  
\f0 \'be\'ca\'b4\'c2
\f2  
\f0 \'b0\'e6\'bf\'ec\'b8\'a6
\f2  
\f0 \'c3\'df\'b0\'a1\'c7\'cf\'bf\'a9
\f2  
\f0 \'b8\'f0\'b5\'e7
\f2  
\f0 \'c1\'b6\'c7\'d5
\f2  
\f0 \'b0\'e8\'bb\'ea\'c7\'cf\'b1\'e2
\f2 \
    
\f1 \cf5 Iterator<Integer> it = map.values().iterator()\cf2 ;\
    int \cf5 answer = \cf7 1\cf2 ;\
\
    while\cf5 (it.hasNext())\
        answer *= it.next().intValue() + \cf7 1\cf2 ;\
\
    \cf6 // 3. 
\f0 \'be\'c6\'b9\'ab\'c1\'be\'b7\'f9\'c0\'c7
\f2  
\f0 \'bf\'ca\'b5\'b5
\f2  
\f0 \'c0\'d4\'c1\'f6
\f2  
\f0 \'be\'ca\'b4\'c2
\f2  
\f0 \'b0\'e6\'bf\'ec
\f2  
\f0 \'c1\'a6\'bf\'dc\'c7\'cf\'b1\'e2
\f2 \
    
\f1 \cf2 return \cf5 answer - \cf7 1\cf2 ;\
\
\
\cf5 \}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \cb1 \
\
\
\
}