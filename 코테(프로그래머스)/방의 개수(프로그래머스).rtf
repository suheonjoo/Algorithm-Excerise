{\rtf1\ansi\ansicpg949\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;
\red153\green168\blue186;\red86\green132\blue173;\red109\green109\blue109;\red133\green96\blue154;\red173\green169\blue32;
}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c67843\c66275\c12549;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww14400\viewh10800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \
\
\

\f1 \'b9\'e6\'c0\'c7
\f0  
\f1 \'b0\'b3\'bc\'f6
\f0 (
\f1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b8\'d3\'bd\'ba
\f0 )\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs26 \cf2 \cb3 public static int \cf4 solution\cf5 (\cf2 int\cf5 [] arrows) \{\
\
    \cf2 int \cf5 answer = \cf6 0\cf2 ;\
\
    int\cf5 [] dx = \{\cf6 0\cf2 , \cf6 1\cf2 , \cf6 1\cf2 , \cf6 1\cf2 , \cf6 0\cf2 , \cf5 -\cf6 1\cf2 , \cf5 -\cf6 1\cf2 , \cf5 -\cf6 1\cf5 \}\cf2 ;\
    int\cf5 [] dy = \{-\cf6 1\cf2 , \cf5 -\cf6 1\cf2 , \cf6 0\cf2 , \cf6 1\cf2 , \cf6 1\cf2 , \cf6 1\cf2 , \cf6 0\cf2 , \cf5 -\cf6 1\cf5 \}\cf2 ;\
\
    \cf5 Node curNode = \cf2 new \cf5 Node(\cf6 0\cf2 , \cf6 0\cf5 )\cf2 ;\
\
    \cf5 Map<Node\cf2 , \cf5 List<Node>> visited = \cf2 new \cf5 HashMap<>()\cf2 ;\
\
\
    for \cf5 (\cf2 int \cf5 arrow : arrows) \{\
        \cf7 //2
\f1 \'b9\'f8
\f3  
\f1 \'b9\'dd\'ba\'b9\'c7\'d8\'bc\'ad
\f3  
\f1 \'bd\'ba\'c4\'c9\'c0\'cf
\f3  
\f1 \'be\'f7\'c7\'d4
\f3 \
        
\f2 \cf2 for \cf5 (\cf2 int \cf5 i = \cf6 0\cf2 ; \cf5 i < \cf6 1\cf2 ; \cf5 i++) \{\
\
            Node nextNode = \cf2 new \cf5 Node(curNode.\cf8 x \cf5 + dx[arrow]\cf2 , \cf5 curNode.\cf8 y \cf5 + dy[arrow])\cf2 ;\
\
            if \cf5 (!visited.containsKey(nextNode)) \{\
                \cf7 //
\f1 \'b4\'d9\'c0\'bd
\f3  
\f1 \'c0\'cc\'b5\'bf\'c7\'d2
\f3  
\f1 \'bb\'f5\'b7\'ce
\f3  
\f1 \'b8\'b8\'b3\'b2\'c1\'a1
\f3  
\f1 \'c3\'df\'b0\'a1\'c7\'d8\'c1\'d6\'b1\'e2
\f3 \
                
\f2 \cf5 visited.put(nextNode\cf2 , 
\f4\i \cf5 makeEdgeList
\f2\i0 (curNode))\cf2 ;\
\
\
                \cf7 //
\f1 \'c7\'f6\'c1\'a6
\f3  
\f1 \'b3\'eb\'b5\'e5\'b5\'b5
\f3  
\f1 \'c3\'b3\'c0\'bd
\f3  
\f1 \'b8\'b8\'b5\'e9\'be\'ee\'c1\'f8\'b0\'c5\'b8\'e9
\f3  
\f1 \'b8\'ca\'bf\'a1
\f3  
\f1 \'c3\'df\'b0\'a1\'c7\'cf\'b1\'e2
\f3 \
                
\f2 \cf2 if \cf5 (visited.get(curNode) == \cf2 null\cf5 ) \{\
\
                    visited.put(curNode\cf2 , 
\f4\i \cf5 makeEdgeList
\f2\i0 (nextNode))\cf2 ;\
                \cf5 \} \cf2 else \cf5 \{\cf7 // 
\f1 \'b1\'d7\'b0\'d4
\f3  
\f1 \'be\'c6\'b4\'cf\'b8\'e9
\f3  
\f1 \'b4\'d9\'c0\'bd
\f3  
\f1 \'b3\'eb\'b5\'e5\'b8\'a6
\f3  
\f1 \'c0\'da\'b1\'e2
\f3  
\f1 \'b8\'ae\'bd\'ba\'c6\'ae\'bf\'a1
\f3  
\f1 \'c3\'df\'b0\'a1\'c7\'cf\'b1\'e2
\f3 \
                    
\f2 \cf5 visited.get(curNode).add(nextNode)\cf2 ;\
                \cf5 \}\
\
                \cf7 //
\f1 \'b4\'d9\'c0\'bd
\f3  
\f1 \'b3\'eb\'b5\'e5\'b8\'a6
\f3  
\f1 \'b9\'e6\'ba\'d0\'c0\'9b
\f3  
\f1 \'c0\'fb\'c0\'cc
\f3  
\f1 \'c0\'d6\'b0\'ed
\f2 , 
\f1 \'b0\'a3\'bc\'b1\'c0\'ba
\f3  
\f1 \'c3\'b3\'c0\'bd
\f3  
\f1 \'b8\'b8\'b5\'e9\'be\'ee\'c1\'f8
\f3  
\f1 \'b0\'cd\'c0\'cc\'b8\'e9
\f3  
\f1 \'b0\'a2\'b0\'a2
\f3  
\f1 \'b8\'ae\'bd\'ba\'c6\'ae\'bf\'a1
\f3  
\f1 \'c3\'df\'b0\'a1\'c7\'cf\'b0\'ed
\f2  answer
\f1 \'b5\'b5
\f2  1 
\f1 \'bf\'c3\'b7\'c1\'c1\'dc
\f3 \
            
\f2 \cf5 \} \cf2 else if \cf5 (!visited.get(nextNode).contains(curNode)) \{\
                visited.get(nextNode).add(curNode)\cf2 ;\
                \cf5 visited.get(curNode).add(nextNode)\cf2 ;\
                \cf5 answer++\cf2 ;\
            \cf5 \}\
\
            curNode = nextNode\cf2 ;\
\
        \cf5 \}\
    \}\
    \cf2 return \cf5 answer\cf2 ;\
\cf5 \}\
\
\cf2 private static \cf5 List<Node> \cf4 makeEdgeList\cf5 (Node node) \{\
    \cf7 // edge 
\f1 \'b8\'ae\'bd\'ba\'c6\'ae
\f3  
\f1 \'bb\'f5\'b7\'ce
\f3  
\f1 \'b8\'b8\'b5\'e9\'b1\'e2
\f3 \
    
\f2 \cf5 List<Node> edge = \cf2 new \cf5 ArrayList<>()\cf2 ;\
    \cf5 edge.add(node)\cf2 ;\
    return \cf5 edge\cf2 ;\
\
\cf5 \}\
\
\cf2 private static class \cf5 Node\{\
\
    \cf2 int \cf8 x\cf2 , \cf8 y\cf2 ;\
\
    public \cf4 Node\cf5 (\cf2 int \cf5 x\cf2 , int \cf5 y)\{\
        \cf2 this\cf5 .\cf8 x\cf5 =x\cf2 ;\
        this\cf5 .\cf8 y\cf5 =y\cf2 ;\
    \cf5 \}\
\
    \cf9 @Override\
    \cf2 public boolean \cf4 equals\cf5 (Object o) \{\
        \cf2 if \cf5 (\cf2 this \cf5 == o) \cf2 return true;\
        if \cf5 (o == \cf2 null \cf5 || getClass() != o.getClass()) \cf2 return false;\
        \cf5 Node node = (Node) o\cf2 ;\
        return \cf8 x \cf5 == node.\cf8 x \cf5 && \cf8 y \cf5 == node.\cf8 y\cf2 ;\
    \cf5 \}\
\
    \cf9 @Override\
    \cf2 public int \cf4 hashCode\cf5 () \{\
        \cf2 return \cf5 Objects.
\f4\i hash
\f2\i0 (\cf8 x\cf2 , \cf8 y\cf5 )\cf2 ;\
    \cf5 \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \cb1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}