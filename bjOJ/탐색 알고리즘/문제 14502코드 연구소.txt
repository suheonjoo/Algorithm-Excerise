import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class Main{      //파일 이름과 같아야 함

    static class virus{
        int x, y;
        virus(int x, int y){
            this.x=x;
            this.y=y;
        }
    }

    static int N;
    static int M;
    static int[][] map;
    //static int[][] copy_map;

    static int[] dr = {-1,1,0,0};
    static int[] dc = {0,0,-1,1};

    static int result = Integer.MIN_VALUE;  //안전지역 개수
    
    public static void main(String[] args){
        
        Scanner sc = new Scanner(System.in);
        
        N = sc.nextInt();   //지도의 세로 크기
        M = sc.nextInt();   //지도이 가로 크기

        map = new int[N][M];    //지도
        //copy_map = new int[N][M];   //커피지도

        for(int i=0;i<N;i++){   //지도 입력
            for(int j=0;j<M;j++){
                map[i][j]= sc.nextInt();
            }
        }
       
        //copy_map =map;

        DFS(0);

        System.out.println(result);
        
    }
    //이거 방법이 ㅈㄴ 노가다임 
    public static void DFS(int depth){  //벽세우기

        //새로운 벽이 3개 세우면 바이러스 퍼트리기 
        if(depth==3){
            BFS();
            return ;
        }

        //새로운 벽 3개 세울때까지 벽세우기
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(map[i][j]==0){   //빈 공간이면
                    map[i][j]=1;    //벽 세우기
                    DFS(depth+1);   

                    map[i][j]=0;    //다시 돌려 놓기
                }
            }
        }

    }

    public static void BFS(){   //바이러스 퍼트리기

        int[][] virus_map = new int[N][M];
        Queue<virus> que = new LinkedList<virus>();

        //map을 virus map에 복사 작업
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                virus_map[i][j]= map[i][j];
            }
        }

        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(virus_map[i][j]==2){ //바이러스이면 큐에 넣는다
                    que.add(new virus(i,j));
                }
            }
        }

        while(!que.isEmpty()){  //큐가 빌때까지 진행
            virus v =que.remove();

            for(int d=0;d<4;d++){   //기준 바이러스 기준으로 상하좌우 진행
                int nr = v.x + dr[d];
                int nc = v.y + dc[d];

                if(nr>=0&&nc>=0&&nr<N&&nc<M){   //맵 범위 안에 있고
                    if(virus_map[nr][nc]==0){   //빈곳이면 
                        virus_map[nr][nc]=2;    //바이러스 퍼트리기
                        que.add(new virus(nr,nc));
                    }
                }
            }
        }
        safe(virus_map);    //위의 해당 바이러스 맵 기준으로 안전지역 count 하기


    }

    public static void safe(int[][] virus_map){
        int count=0;
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(virus_map[i][j]==0){
                    count++;
                }
                
            }
        }
        result = Math.max(count, result);
    }






    
}