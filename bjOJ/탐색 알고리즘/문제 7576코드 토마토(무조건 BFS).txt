import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class tomato{
    int x;
    int y;
    tomato(int x, int y){
        this.x=x;
        this.y=y;
    }
}

public class Main{      //파일 이름과 같아야 함

    static int M;
    static int N;
    static int[] dx ={-1,1,0,0};
    static int[] dy ={0,0,-1,1};

    static int[][] board;

    static Queue<tomato> que;


    public static void main(String[] args){
        
        Scanner sc = new Scanner(System.in);
        
        M= sc.nextInt();    //가로 
        N= sc.nextInt();    //세로

        board = new int[N][M];

        que = new LinkedList<>();

        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                board[i][j]=sc.nextInt();

                if(board[i][j]==1){
                    que.add(new tomato(i,j));       //일단 1인 것에 큐에 모두 넣음
                }
            }
        }
        System.out.println(BFS());

    }
    
    public static int BFS(){
        while (!que.isEmpty()){
            tomato t = que.remove();
            
            int x = t.x;
            int y = t.y;
            for(int i=0;i<4;i++){
                int nx = x + dx[i];
                int ny = y + dy[i];

                if(nx>=0&&ny>=0&&nx<N&&ny<M){
                    if(board[nx][ny]==0){
                        que.add(new tomato(nx, ny));

                        board[nx][ny]=board[x][y]+1;
                    }
                }
            }
        }

        //최대 날짜 구하기
        int  result = Integer.MIN_VALUE;

        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(board[i][j]==0){
                    return -1;
                }
                result = Math.max(result, board[i][j]);
            }
        }
        //토마토가 모두 익은 상태
        if(result==1){
            return 0;
        }else{  //걸린 일수는 최대 날짜에서 1을 빼줘야함
            return result-1;
        }


    }

    
    
}