import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class Main{      //파일 이름과 같아야 함

    static int M, N, K;
    static int[][] map; //배추밭
    static boolean[][] visit;   //방문한것인지 유무
    static int count;   //지렁이 개수
    static int[] dr ={0,-1,0,1};    //상하좌우 움직임
    static int[] dc ={1,0,-1,0};

    public static void main(String[] args){
        
        Scanner sc = new Scanner(System.in);
        
        int T = sc.nextInt();   //테스트 케이스 개수

        for(int tc=1;tc<=T;tc++){
            M = sc.nextInt();   //가로, 세로, 배추 개수
            N = sc.nextInt();
            K = sc.nextInt();

            map = new int[M][N];    //배추밭 생성
            visit = new boolean[M][N];  //방문 유무 개수 생성

            for(int i=0;i<K;i++){   //배추 심은 곳에 1넣어줌
                map[sc.nextInt()][sc.nextInt()]=1;
            }

            int count=0;    //초기 지렁이 개수 초기화

            for(int i=0;i<M;i++){
                for(int j=0;j<N;j++){
                    if(map[i][j]==1&&!visit[i][j]){ //방문되자 않고 배추가 있는 곳 탐색
                        bfs(i,j);   //해당한 곳에 dfs 해줌
                        count++;
                    }
                }
            }
            System.out.println(count);

        }

    }
    //dfs
    static void bfs(int r, int c){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{r,c});

        visit[r][c]=true;

        while(!q.isEmpty()){
            
            int curx=q.peek()[0];
            int cury=q.peek()[1];
            q.poll();

            for(int i=0;i<4;i++){
                int nextx= curx +dr[i];
                int nexty= cury +dc[i];
                
                /*if(nextx<0&&nexty<0&&nextx>=M&&nexty>=N){
                    continue;
                }*/
                if(nextx>=0&&nexty>=0&&nextx<M&&nexty<N){
                    if(map[nextx][nexty]==1&&!visit[nextx][nexty]){
                        q.add(new int[]{nextx,nexty});
                        visit[nextx][nexty]=true;

                    }
                }

            }

        }

    }




    //dfs 
    static void dfs(int r, int c){
        visit[r][c]=true;

        for(int i=0;i<4;i++){
            int nr = r+dr[i];
            int nc = c+dc[i];

            if(nr>=0&&nc>=0&& nr<M&&nc<N){
                if(map[nr][nc]==1&&!visit[nr][nc]){
                    dfs(nr, nc);
                }
            }
        }

    }

    
    
}